The <main> function makes a call to <p> function.

$ (gdb) disas main
...
0x08048545 <+6>:	call   0x80484d4 <p>
...

The <p> function makes a call to <gets> which means we can overflow the buffer.

$ (gdb) disas p
...
0x080484ed <+25>:	call   0x80483c0 <gets@plt>
...

The idea is to insert ou shellcode to spawn a shell but, this comparison prevents our shellcode to be accessed
directly at an address matching 0xb0000000 pattern.

0x080484fb <+39>:	and    eax, 0xb0000000
0x08048500 <+44>:	cmp    eax, 0xb0000000

So first we need to pass this check, and then jump back to where we want.
Then we overwrite the $eip with the return address of <p> function.
It will cause the program to loop back on ret, pop this address off the stack and then move up to the next address on the stack.
It will look something like : <80 bytes of garbage> + <return address> + <shellcode address> + <nopsled> + <shellcode>
